function [ varargout ] = optionalparams( inputs, varargin )
%OPTIONALPARAMS Handles optional parameters passed to a function
%
%   INPUTS is a cell array (normally generated by varargin in the argument
%   list of the calling function) that should contain key-value pairs of
%   parameters. 
%
%   VARARGIN contains a list of pairs of valid parameters and default
%   values, with each pair optionally followed by a function to type check
%   the value of that parameter.
%
%   VARARGOUT contains the parameter values.  If a valid parameter is found
%   in INPUTS, then the parameter is set to that value; otherwise, it is
%   set to the default value.


% Error checking
if isempty(varargin)
  error('No parameters defined to check')
elseif ~all(cellfun(@ischar,inputs(1:2:end)))
  error('Parameters must be of type char')
elseif mode(length(inputs),2) == 1
  error('Each parameter must define one parameter value')
end

% Create a 3 column cell array, one row per parameter, and the first
% column contains the parameter name, the second column the default
% value, and the third column an optional type checking function
params = cell(floor(length(varargin)/2),3);
r = 1;   % Row index for params
c = 1;   % Column index for params
% Define function that always returns true to not check type
no_type_check = @(x) true;

for idx = 1:length(varargin)
  if c == 3 && isa(varargin{idx}, 'function_handle')
    % Type checking function given, insert it into PARAMS
    params{r,c} = varargin{idx};
    r = r + 1;
    c = 1;
  else
    if c == 3
      % No type checking function given, insert trivial function and
      % continue handling VARARGIN at current index
      params{r,c} = no_type_check;
      r = r + 1;
      c = 1;
    end
    if c == 1 && ~ischar(varargin{idx}) % Expecting parameter name
      error(['Expected a char with Parameter name. Instead recieved ',...
        'a variable of type ' class(varargin{idx}) '.'])
    end
    params{r,c} = varargin{idx};
    c = c + 1;
  end
end
if c == 1
  % An extra unused row was added, remove this extra row
  r = r - 1;
elseif c == 3
  % Add default type checker if none given for last parameter in list
  params{r,c} = no_type_check;
end
% Preallocation was possibly an overestimate, truncate to correct size
params = params(1:r,:);

% iterate p through two element arrays of parameter/value pairs
for p = {inputs{1:2:end}; inputs{2:2:end}}
  match = ...
    cellfun(@(x)strncmpi(x, p{1}, length(p{1})), params(:,1));
  if ~any(match) % No corresponding parameters found
    error(['No matching parameter found for "' p{1} '".'])
  elseif sum(match) > 1 % Multiple matches
    error(['Multiple matches found for "' p{1} '": ' ...
      join(params(match,1)) '.']);
  end
  if params{match,3}(p{2}) % type check new value
    params(match,2) = p(2);
  else
    error(['Unexpected type (' class(p{2}) ') for parameter ' ...
      params{match,1} '.'])
  end
end

% Set output variable to desired values
varargout = params(:,2);

end

